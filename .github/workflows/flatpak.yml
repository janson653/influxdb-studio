name: Flatpak Build

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  flatpak-build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        gnome-version: ['47', '46', '45', '44']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install system dependencies
        run: |
          echo "🔧 安装系统依赖..."
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libwebkit2gtk-4.0-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            flatpak-builder \
            appstream-compose \
            flatpak

      - name: Build Tauri application
        run: |
          echo "🚀 构建 Tauri 应用..."
          
          # 安装前端依赖
          pnpm install
          
          # 构建前端
          pnpm run build
          
          # 构建 Tauri 应用
          cd src-tauri
          cargo build --release --target x86_64-unknown-linux-gnu
          
          # 复制构建产物
          cp target/x86_64-unknown-linux-gnu/release/influxdb-studio ../flatpak/
          cd ..
          
          echo "✅ Tauri 应用构建完成"

      - name: Setup Flatpak environment
        run: |
          echo "📦 配置 Flatpak 环境..."
          
          # 检查版本信息
          echo "📋 版本信息："
          flatpak-builder --version
          flatpak --version
          appstream-compose --version || echo "⚠️  appstream-compose 不可用"
          
          # 确保 Flatpak 服务正在运行
          echo "🔧 启动 Flatpak 服务..."
          sudo systemctl start flatpak-system-helper || true
          
          # 检查 Flatpak 状态
          echo "🔍 检查 Flatpak 状态..."
          flatpak --version
          flatpak remote-list || echo "⚠️  无法列出远程仓库"
          
          # 以 root 权限配置 Flatpak
          echo "🔧 配置 Flatpak 远程仓库..."
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak update
          
          # 安装指定版本的 GNOME Platform
          echo "🔧 安装 GNOME Platform ${{ matrix.gnome-version }}..."
          sudo flatpak install flathub org.gnome.Platform//${{ matrix.gnome-version }} org.gnome.Sdk//${{ matrix.gnome-version }} -y
          
          # 验证安装
          echo "✅ 验证 Flatpak 环境..."
          flatpak list --app | grep -E "(Platform|Sdk)" || echo "⚠️  未找到预期的运行时"
          flatpak list --runtime | grep -E "(Platform|Sdk)" || echo "⚠️  未找到预期的运行时"

      - name: Build Flatpak package
        id: build
        run: |
          echo "🔨 构建 Flatpak 包 (GNOME ${{ matrix.gnome-version }})..."
          
          cd flatpak
          
          # 更新配置文件中的运行时版本
          echo "🔧 更新运行时版本到 ${{ matrix.gnome-version }}..."
          sed -i "s/runtime-version: '47'/runtime-version: '${{ matrix.gnome-version }}'/" com.influxdb.studio.yml
          
          # 检查构建环境
          echo "📋 构建环境检查："
          echo "当前目录: $(pwd)"
          echo "文件列表:"
          ls -la
          echo "Flatpak 运行时列表:"
          flatpak list --runtime | grep -E "(Platform|Sdk)" || echo "⚠️  未找到运行时"
          
          # 构建 Flatpak 包
          echo "🔨 开始构建..."
          flatpak-builder --force-clean --repo=repo build com.influxdb.studio.yml
          
          # 检查构建结果
          if [ -d "build" ]; then
            echo "✅ 构建目录创建成功"
          else
            echo "❌ 构建目录创建失败"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # 创建包文件
          echo "📦 创建 Flatpak 包文件..."
          flatpak build-bundle repo influxdb-studio-gnome${{ matrix.gnome-version }}.flatpak com.influxdb.studio
          
          # 检查构建结果
          if [ -f "influxdb-studio-gnome${{ matrix.gnome-version }}.flatpak" ]; then
            echo "✅ 构建成功！"
            ls -lh influxdb-studio-gnome${{ matrix.gnome-version }}.flatpak
            echo "size=$(ls -lh influxdb-studio-gnome${{ matrix.gnome-version }}.flatpak | awk '{print $5}')" >> $GITHUB_OUTPUT
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 构建失败！"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          cd ..

      - name: Test Flatpak package
        if: steps.build.outputs.success == 'true'
        run: |
          echo "🧪 测试 Flatpak 包..."
          
          cd flatpak
          
          # 安装包进行测试
          flatpak install --user influxdb-studio-gnome${{ matrix.gnome-version }}.flatpak -y
          
          # 检查应用是否可以启动（非交互式测试）
          if flatpak run com.influxdb.studio --help &> /dev/null || flatpak run com.influxdb.studio --version &> /dev/null; then
            echo "✅ 应用测试通过"
          else
            echo "⚠️  应用启动测试失败，但包安装成功"
          fi
          
          # 卸载测试包
          flatpak uninstall com.influxdb.studio -y
          
          cd ..

      - name: Upload Flatpak package
        if: steps.build.outputs.success == 'true' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: influxdb-studio-gnome${{ matrix.gnome-version }}
          path: flatpak/influxdb-studio-gnome${{ matrix.gnome-version }}.flatpak
          retention-days: 30

      - name: Upload to Release
        if: steps.build.outputs.success == 'true' && startsWith(github.ref, 'refs/tags/')
        run: |
          echo "📤 上传到 Release..."
          gh release upload ${{ github.ref_name }} flatpak/influxdb-studio-gnome${{ matrix.gnome-version }}.flatpak --repo ${{ github.repository }}
          echo "✅ 上传成功！"

      - name: Build Summary
        if: always()
        run: |
          echo "📊 构建总结 (GNOME ${{ matrix.gnome-version }})"
          echo "构建状态: ${{ steps.build.outputs.success }}"
          if [ "${{ steps.build.outputs.success }}" = "true" ]; then
            echo "包大小: ${{ steps.build.outputs.size }}"
            echo "✅ 构建成功"
          else
            echo "❌ 构建失败"
          fi

  # 选择最佳版本作为主要发布
  select-best-version:
    needs: flatpak-build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Select best version
        run: |
          echo "🎯 选择最佳版本..."
          
          # 查找所有构建成功的包
          find artifacts -name "*.flatpak" -type f | while read file; do
            echo "找到包: $file"
            ls -lh "$file"
          done
          
          # 选择最新的 GNOME 版本作为主要发布
          BEST_PACKAGE=$(find artifacts -name "*.flatpak" -type f | sort -V | tail -1)
          
          if [ -n "$BEST_PACKAGE" ]; then
            echo "选择最佳包: $BEST_PACKAGE"
            cp "$BEST_PACKAGE" influxdb-studio.flatpak
            echo "✅ 最佳版本已准备就绪"
          else
            echo "❌ 没有找到可用的包"
            exit 1
          fi

      - name: Upload best version to Release
        run: |
          echo "📤 上传最佳版本到 Release..."
          gh release upload ${{ github.ref_name }} influxdb-studio.flatpak --repo ${{ github.repository }}
          echo "✅ 最佳版本上传成功！" 